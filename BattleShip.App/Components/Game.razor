@using BattleShip.Models
@using System.Text

@inject GameState GameState  // Injecte le singleton GameState
@inject HttpClient Http      // Injecte le client HTTP pour appeler l'API
@inject IJSRuntime JS


<div class="grids">

    @* Grid de l'adversaire *@
    <div class="oponent-grid">
        <div class="sub-title">
			<h3>Opponent Grid</h3>
		</div>
		<div class="grid-container">
			@for (int row = 0; row < 10; row++)
			{
				var currentRow = row;
				<div class="grid-row pos-{row}">
					@for (int col = 0; col < 10; col++)
					{
						var currentCol = col;
						<div class="grid-item pos-{row}-{col} pos-{col}">
							<div class="grid-item pos-{row}-{col} pos-{col}" @onclick="() => Shoot(currentRow, currentCol)">
								@if (GameState.MaskedGridJ2 != null)
								{
									@if (GameState.MaskedGridJ2[row][col] == true)
									{
										<img src="img/hit.png" alt="Touché" class="img-target-grid" />
									}
									else if (GameState.MaskedGridJ2[row][col] == false)
									{
										<img src="img/miss.png" alt="Raté" class="img-target-grid" />
									}
								}
							</div>
						</div>
					}
				</div>
			}
		</div>
    </div>



    @* Notre grille *@
    <div class="our-grid">
        <div class="sub-title">
			<h3>Our Grid</h3>
		</div>
		<div class="grid-container">
			@for (int row = 0; row < 10; row++)
			{
				<div class="grid-row pos-{row}">
					@for (int col = 0; col < 10; col++)
					{
						<div class="grid-item pos-{row}-{col} pos-{col}">
							@if (GameState.GridJ1 != null)
							{
								@GetImageForCell(GameState.GridJ1,GameState.MaskedGridJ1, row, col)
							}
							else {
								<span>?</span>
							}
						</div>
					}
				</div>
			}
		</div>
    </div>


	@* Si le jeu est fini, on couvre l'écran *@
	@if(GameState.end)
	{
		<div class="end-game-overlay" id="endGameOverlay">
			<p>Fin du Jeu</p>
			@* <button @onclick="">Démarrer un nouveau jeu</button> *@
		</div>
	}

</div>




@code {

	private MarkupString GetImageForCell(char[][] grid, bool?[][] maskeGrid, int x, int y)
	{

		string imageUrl = "";
		string rotationClass = "";

		// cas ou il y a un bateau
		if (grid[x][y] != '\0')
		{
			if(maskeGrid[x][y] == null)
			{
				// lettre du bateau
				char letter = grid[x][y];

				// si lettre a gauche et a droite => midle
				if (y > 0 && y < 9 && grid[x][y-1] == letter && grid[x][y+1] == letter){
					imageUrl = "img/middle_boat.png";
					rotationClass = "rotate-90";
				}
				// sinon si lettre a gauche => last
				else if (y > 0 && grid[x][y-1] == letter){
					imageUrl = "img/front_boat.png";
					rotationClass = "rotate-90";
				}
				// sinon si lettre a droite => first
				else if (y < 9 && grid[x][y+1] == letter){
					imageUrl = "img/back_boat.png";
					rotationClass = "rotate-90";
				}
				// si lettre en haut et en bas => midle
				else if (x > 0 && x < 9 && grid[x-1][y] == letter && grid[x+1][y] == letter){
					imageUrl = "img/middle_boat.png";
				}
				// sinon si lettre en haut => front
				else if (x > 0 && grid[x-1][y] == letter){
					imageUrl = "img/back_boat.png";
				}
				// sinon si lettre en bas => last
				else if (x < 9 && grid[x+1][y] == letter){
					imageUrl = "img/front_boat.png";
				}
				else {
					imageUrl = "img/single_boat.png";
				}
			}
			else if(maskeGrid[x][y] == true)
			{
				imageUrl = "img/hit.png";
			}
			

		}
		// cas ou il n'y a pas de bateau
		else {

			if(maskeGrid[x][y] == false)
			{
				imageUrl = "img/miss.png";
			}
			else {
				return new MarkupString($"<span></span>");
			}
		}
		
		return new MarkupString($"<img src='{imageUrl}' alt='cell-image' class='img-grid {rotationClass}' />");
	}

	

	private async Task Shoot(int row, int col)
    {
		// on crée l'objet a envoyer
		var shootRequest = new ShootRequest
		{
			x = col,
			y = row,
			j = 1
		};

		// on serialize en JSON
		var jsonSend = System.Text.Json.JsonSerializer.Serialize(shootRequest);
		var content = new StringContent(jsonSend, Encoding.UTF8, "application/json");

		// on envoie
		var response = await Http.PostAsync("/tour", content);

		// Si on a une réponse en code 200
        if (response.IsSuccessStatusCode)
        {
			// on met le json en String
            var json = await response.Content.ReadAsStringAsync();
			
			// si le Json n'est pas vide
            if (!string.IsNullOrEmpty(json))
            {
				// On set les options de desérialization 
				var options = new System.Text.Json.JsonSerializerOptions
				{
					PropertyNameCaseInsensitive = true, // Assure la correspondance des noms des propriétés sans tenir compte de la casse
					Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping // Gère les caractères Unicode comme '\u0000'
				};

				// On déserialize dans un objet adapté
				var gameShootResponse = System.Text.Json.JsonSerializer.Deserialize<GameShootResponse>(json, options);

				if (gameShootResponse != null)
				{
					// on recup le GameState et le ShootState
					var gameReponse = gameShootResponse.game;
					var shootReponse = gameShootResponse.shootResult;;

					// Mise à jour du GameState si nécessaire
					if (shootReponse != null && shootReponse.CanShoot && gameReponse != null)
					{
						GameState.GridJ1 = gameReponse.GridJ1;
						GameState.MaskedGridJ1 = gameReponse.MaskedGridJ1;
						GameState.MaskedGridJ2 = gameReponse.MaskedGridJ2;
						GameState.start = true;

						if(gameReponse.IsGameFinished){
						GameState.end = true;

						}
					}
					else
					{
						Console.WriteLine("shoot incorrect");
					}
				}
				else {
					Console.WriteLine("no property");
				}
            }
			else {
				Console.WriteLine("json null");
			}
        }
        else
        {
            Console.WriteLine("Erreur lors de l'appel API : " + response.StatusCode);
		}

        Console.WriteLine($"click shoot, row : row, {row} col : {col}");
    }


	public class ShootRequest
    {
        public int x { get; set; }
        public int y { get; set; }
		public int j { get; set; }
    }
}
