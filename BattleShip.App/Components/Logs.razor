@using BattleShip.Models
@using System.Text

@inject GameState GameState 
@inject HttpClient Http

<div class="logs">
    <div align="center">
        <button class="btn btn-primary" @onclick="() => Undo(GameState)">
            Undo
        </button>
    </div>
    <div class="logText">
        @for (int i = GameState.Logs.Count - 1; i >= 0; i--)
        {
            <div>@GameState.Logs[i]</div>
        }
    </div>

</div>


@code {

    private async Task Undo(GameState GameState)
    {
        if(!GameState.end){
            GameState.Logs.RemoveAt(GameState.Logs.Count - 1);
        }
		// on envoie
		var response = await Http.GetAsync("/undo");

		// Si on a une réponse en code 200
        if (response.IsSuccessStatusCode)
        {
			// on met le json en String
            var json = await response.Content.ReadAsStringAsync();
			
			// si le Json n'est pas vide
            if (!string.IsNullOrEmpty(json))
            {
				// On set les options de desérialization 
				var options = new System.Text.Json.JsonSerializerOptions
				{
					PropertyNameCaseInsensitive = true, // Assure la correspondance des noms des propriétés sans tenir compte de la casse
					Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping // Gère les caractères Unicode comme '\u0000'
				};

				// On déserialize dans un objet adapté
				var gameResponse = System.Text.Json.JsonSerializer.Deserialize<Models.Game>(json, options);

				if (gameResponse != null)
				{
                    GameState.GridJ1 = gameResponse.GridJ1;
                    GameState.MaskedGridJ1 = gameResponse.MaskedGridJ1;
                    GameState.MaskedGridJ2 = gameResponse.MaskedGridJ2;
                    GameState.start = true;

                    // fleet maj
                    GameState.fleetJ1 = gameResponse.fleetJ1;
                    GameState.fleetJ2 = gameResponse.fleetJ2;

                    // suivi de maj
                    GameState.NotifyStateChanged();

                    if(gameResponse.IsGameFinished){
                        GameState.end = true;
                    }
                    StateHasChanged();
				}
				else {
					Console.WriteLine("no property");
				}
            }
			else {
				Console.WriteLine("json null");
			}
        }
        else
        {
            Console.WriteLine("Erreur lors de l'appel API : " + response.StatusCode);
		}
    }

    protected override void OnInitialized()
    {
        GameState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        GameState.OnChange -= StateHasChanged;
    }
}