@inject GameState GameState
@inject HttpClient Http

<div class="input-name">
	<input @oninput="(e) => Name = e.Value.ToString()" placeholder="Entrez votre nom" class="form-control" />
</div>

<div class="welcome-text">
	<span> Bienvenue </span>
	<span>- @Name -</span>
</div>

@* Selection des niveaux *@
<div class="selection-level">

	<div class="sub-selection">
		<div class="title-selection">
			<p>üôã‚Äç‚ôÇÔ∏è PvE ü§ñ</p>
		</div>
		<div class="btn-selection">
			<button class="btn btn-outline-info" @onclick="() => OnButtonClicked(level0)">Level 0 (8x8)</button>
			<button class="btn btn-outline-info" @onclick="() => OnButtonClicked(level1)">Level 1 (8x8)</button>
			<button class="btn btn-outline-info" @onclick="() => OnButtonClicked(level2)">Level 2 (10x10)</button>
			<button class="btn btn-outline-info" @onclick="() => OnButtonClicked(level3)">Level 3 (10x10)</button>
			<button class="btn btn-outline-info" @onclick="() => OnButtonClicked(level4)">Level 4 (12x12)</button>
		</div>
	</div>

	<div class="sub-selection">
		<div class="title-selection">
			<p>üôã‚Äç‚ôÇÔ∏è PvP üôã‚Äç‚ôÇÔ∏è</p>
		</div>
		<div class="btn-selection">
			<button class="btn btn-outline-info" @onclick="() => OnButtonClicked(level5)">Petite Grille (8x8)</button>
			<button class="btn btn-outline-info">Moyenne Grille (10x10)</button>
			<button class="btn btn-outline-info">Grosse Grille (12x12)</button>
		</div>
	</div>
</div>
<div class="leaderboard-container">
    <h2>üèÜ Leader Board üèÜ</h2>

    @if (leaderBoardResult != null)
    {
        <div class="leaderboard">
            <!-- Coup Count Section -->
            <div class="leaderboard-section">
                <h3>Top 3: Coup Count</h3>
                <table class="leaderboard-table">
                    <thead>
                        <tr>
                            <th>User</th>
                            <th>Coup Count</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var coup in leaderBoardResult.UserCoupCount.Take(3))
						{
							<tr>
								<td>@coup.Key</td>
								<td>@coup.Value</td>
							</tr>
						}
                    </tbody>
                </table>
            </div>

            <!-- Victory Count Section -->
            <div class="leaderboard-section">
                <h3>Top 3: Victory Count</h3>
                <table class="leaderboard-table">
                    <thead>
                        <tr>
                            <th>User</th>
                            <th>Victory Count</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var victory in leaderBoardResult.UserVictoryCount.Take(3))
                        {
                            <tr>
                                <td>@victory.Key</td>
                                <td>@victory.Value</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <p>Loading Leader Board...</p>
    }
</div>




@code {
	private LeaderBoardResult leaderBoardResult;
	private string Name { get; set; } = string.Empty;
	private string level0 = "10";
	private string level1 = "11";
	private string level2 = "12";
	private string level3 = "13";
	private string level4 = "14";
	private string level5 = "00";

    [Parameter]
    public EventCallback<(string, string)> OnCallParentMethod { get; set; }

    private async Task OnButtonClicked(string lvl)
    {
		var parameters = (lvl, Name);
		Console.WriteLine(Name);
        if (OnCallParentMethod.HasDelegate & Name != null & Name != "")
        {
            await OnCallParentMethod.InvokeAsync(parameters);
        }
    }
	protected override async Task OnInitializedAsync()
    {
        GameState.OnChange += StateHasChanged;
        await LoadLeaderBoard(); // Charger le leaderboard d√®s l'initialisation du composant
    }

    public void Dispose()
    {
        GameState.OnChange -= StateHasChanged;
    }
	// M√©thode pour r√©cup√©rer les donn√©es du leaderboard depuis l'API
    private async Task LoadLeaderBoard()
    {
        try
        {
            var response = await Http.GetAsync("/leaderBoard");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(json))
                {
                    var options = new System.Text.Json.JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    };

                    leaderBoardResult = System.Text.Json.JsonSerializer.Deserialize<LeaderBoardResult>(json, options);
                    StateHasChanged(); // Pour mettre √† jour l'interface apr√®s le chargement
                }
            }
            else
            {
                Console.WriteLine("Erreur lors de l'appel API : " + response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erreur : " + ex.Message);
        }
    }
}