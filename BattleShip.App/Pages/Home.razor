@page "/"

@using BattleShip.Models
@using System.Text

@inject GameState GameState  // Injecte le singleton GameState
@inject HttpClient Http      // Injecte le client HTTP pour appeler l'API
@inject IJSRuntime JS


<PageTitle>Battle Ship</PageTitle>

<div class="title">
    <p>
		BattleShip
	</p>
</div>




@if(GameState != null)
{
	@if(GameState.start == true)
	{
		// btn pour retour Menu
		<div class="start">
			<button class="btn btn-primary" @onclick="Menu">Menu</button>
		</div>

		// Jeu
		<div class="game">
			<BattleShip.App.Components.Fleet></BattleShip.App.Components.Fleet>
			<BattleShip.App.Components.Game></BattleShip.App.Components.Game>
			<BattleShip.App.Components.Logs></BattleShip.App.Components.Logs>
		</div>
	}
	else if(GameState.placeBoat == true)
	{
		// btn pour retour Menu
		<div class="start">
			<button class="btn btn-primary" @onclick="Menu">Menu</button>
		</div>

		// placement des bateaux
		<BattleShip.App.Components.Placement OnCallStart="HandleStartGame"></BattleShip.App.Components.Placement>
	}
	else{
		<BattleShip.App.Components.Menu OnCallParentMethod="HandleSetUp"></BattleShip.App.Components.Menu>
	}
}
else 
{
	// Menu
	<BattleShip.App.Components.Menu OnCallParentMethod="HandleSetUp"></BattleShip.App.Components.Menu>
}



@code {

	private async Task Menu()
    {
		GameState.start = false;
		GameState.end = false;
		GameState.placeBoat = false;
	}

	private async Task HandleStartGame(Fleet fleetPlaced){await StartGame(fleetPlaced);}
	private async Task HandleSetUp(string level){await SetUp(level);}


	private async Task SetUp(string lvl)
	{
		Console.WriteLine("placement bato");

		// TODO mettre en mode placeBoat
		GameState.placeBoat = true;
		GameState.NotifyStateChanged();

		Console.WriteLine(lvl);

		var levelRequest = new BattleShip.Models.LevelRequest
		{
			LevelDifficulty = lvl,
		};

		// on serialize en JSON
		var jsonSend = System.Text.Json.JsonSerializer.Serialize(levelRequest);
		var content = new StringContent(jsonSend, Encoding.UTF8, "application/json");

		// on envoie
		var response = await Http.PostAsync("/setup", content);


		if (response.IsSuccessStatusCode)
		{
			var json = await response.Content.ReadAsStringAsync();

			if (json != null)
			{
				// On set les options de desérialization 
				var options = new System.Text.Json.JsonSerializerOptions
				{
					PropertyNameCaseInsensitive = true, // Assure la correspondance des noms des propriétés sans tenir compte de la casse
					Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping // Gère les caractères Unicode comme '\u0000'
				};

				Console.WriteLine(json);
				// Déserialization du JSON
                var gameResponse = System.Text.Json.JsonSerializer.Deserialize<BattleShip.Models.Game>(json, options);

				// On met à jour notre singleton
				if (gameResponse != null)
				{
					GameState.fleetJ1 = gameResponse.fleetJ1;
					GameState.GridJ1 = gameResponse.GridJ1;
					Console.WriteLine(gameResponse.GridJ1);
				}
			}
		}
	}



    private async Task StartGame(Fleet fleetPlaced)
    {	
		Console.WriteLine("start");
		Console.WriteLine(fleetPlaced);

		List<Boat> boats = [];
		if(fleetPlaced != null)
		{
			boats = fleetPlaced.Boats;
		}
		
		// Ce qu'on va send	
		var placeRequest = new BattleShip.Models.PlaceRequest
		{
			Boats = boats
		};

		// on serialize en JSON
		var jsonSend = System.Text.Json.JsonSerializer.Serialize(placeRequest);
		var content = new StringContent(jsonSend, Encoding.UTF8, "application/json");

		// on envoie
		var response = await Http.PostAsync("/start", content);

        if (response.IsSuccessStatusCode)
        {
		
            var json = await response.Content.ReadAsStringAsync();
			
            if (json != null)
            {
				// On set les options de desérialization 
				var options = new System.Text.Json.JsonSerializerOptions
				{
					PropertyNameCaseInsensitive = true, // Assure la correspondance des noms des propriétés sans tenir compte de la casse
					Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping // Gère les caractères Unicode comme '\u0000'
				};

				// Déserialization du JSON
                var gridsResponse = System.Text.Json.JsonSerializer.Deserialize<BattleShip.Models.Game>(json, options);

				// On met à jour notre singleton
				if (gridsResponse != null)
				{
					GameState.GridJ1 = gridsResponse.GridJ1;
                    GameState.MaskedGridJ1 = gridsResponse.MaskedGridJ1;
					GameState.MaskedGridJ2 = gridsResponse.MaskedGridJ2;
                    GameState.start = true;

					GameState.NotifyStateChanged();
				}
            }
        }
        else
        {
            Console.WriteLine("Erreur lors de l'appel API : " + response.StatusCode);
        }
    }
}