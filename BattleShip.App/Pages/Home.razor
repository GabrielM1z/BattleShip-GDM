@page "/"

@using BattleShip.Models
@using System.Text

@inject GameState GameState  // Injecte le singleton GameState
@inject HttpClient Http      // Injecte le client HTTP pour appeler l'API
@inject IJSRuntime JS


<PageTitle>Battle Ship</PageTitle>

<div class="title">
    <p>
		BattleShip
	</p>
</div>




@if(GameState != null)
{
	@if(GameState.start == true)
	{
		// btn pour retour Menu
		<div class="start">
			<button class="btn btn-primary" @onclick="Menu">Menu</button>
		</div>

		// Jeu
		<div class="game">
			<BattleShip.App.Components.Fleet></BattleShip.App.Components.Fleet>
			<BattleShip.App.Components.Game></BattleShip.App.Components.Game>
			<BattleShip.App.Components.Logs></BattleShip.App.Components.Logs>
		</div>
	}
	else if(GameState.placeBoat == true)
	{
		// btn pour retour Menu
		<div class="start">
			<button class="btn btn-primary" @onclick="Menu">Menu</button>
		</div>
		
		// placement des bateaux
		<BattleShip.App.Components.Placement OnCallParentMethod="HandleStartGame"></BattleShip.App.Components.Placement>
	}
	else{
		<BattleShip.App.Components.Menu OnCallParentMethod="HandlePlaceBoats"></BattleShip.App.Components.Menu>
	}
}
else 
{
	// Menu
	<BattleShip.App.Components.Menu OnCallParentMethod="HandlePlaceBoats"></BattleShip.App.Components.Menu>
}



@code {

	private async Task Menu()
    {
		GameState.start = false;
		GameState.end = false;
		GameState.placeBoat = false;
	}

	private async Task HandleStartGame()
    {
        await StartGame();
    }

	private async Task HandlePlaceBoats()
    {
        await PlaceBoats();
    }

	private async Task PlaceBoats()
	{
		Console.WriteLine("placement bato");

		// TODO mettre en mode placeBoat
		GameState.placeBoat = true;
		GameState.NotifyStateChanged();

		// TODO appelé le setUp
	}

    private async Task StartGame()
    {	
		// on adapte la taille de la grille et la difficulté de l'ia
		string lvlDifficulty = "";
		int gridSize = 10;
		if (GameState.pve){

			switch(GameState.level){
				case 1:
					gridSize = 8;
					break;
				case 2:
					gridSize = 8;
					break;
				case 3:
					gridSize = 10;
					break;
				case 4:
					gridSize = 10;
					break;
				default:
					gridSize = 10;
					break;
			}
			lvlDifficulty = gridSize + "_" + GameState.level;
		}
		// Ce qu'on va send	
		var placeRequest = new BattleShip.Models.PlaceRequest
		{
			LevelDifficulty = lvlDifficulty,
			Boats = []
		};

		// on serialize en JSON
		var jsonSend = System.Text.Json.JsonSerializer.Serialize(placeRequest);
		var content = new StringContent(jsonSend, Encoding.UTF8, "application/json");

		// on envoie
		var response = await Http.PostAsync("/start", content);

        if (response.IsSuccessStatusCode)
        {
		
            var json = await response.Content.ReadAsStringAsync();
			
            if (json != null)
            {
				// On set les options de desérialization 
				var options = new System.Text.Json.JsonSerializerOptions
				{
					PropertyNameCaseInsensitive = true, // Assure la correspondance des noms des propriétés sans tenir compte de la casse
					Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping // Gère les caractères Unicode comme '\u0000'
				};

				// Déserialization du JSON
                var gridsResponse = System.Text.Json.JsonSerializer.Deserialize<BattleShip.Models.Game>(json, options);

				// On met à jour notre singleton
				if (gridsResponse != null)
				{
					GameState.GridJ1 = gridsResponse.GridJ1;
                    GameState.MaskedGridJ1 = gridsResponse.MaskedGridJ1;
					GameState.MaskedGridJ2 = gridsResponse.MaskedGridJ2;
                    GameState.start = true;

					GameState.NotifyStateChanged();
				}
            }
        }
        else
        {
            Console.WriteLine("Erreur lors de l'appel API : " + response.StatusCode);
        }
    }
}